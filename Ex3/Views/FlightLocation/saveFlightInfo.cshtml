
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <title>saveFlightInfo</title>
    <style>

        body, html {
            height: 100%;
            margin: 0;
            padding: 0;
        }

        img {
            height: 100%;
            width: 100%;
            position: absolute;
        }

        canvas {
            height: 100%;
            width: 100%;
            position: absolute;
        }
    </style>
</head>
<body id="body" style="background:url(../../Resources/export-map-share.png);background-repeat:no-repeat;background-size:100% 100%;background-attachment:fixed">
    <img id="img" src="~/Resources/export-map-share.png" />
    <canvas id="myCanvas"></canvas>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.0/jquery.min.js"></script>
    <script>
        var prevLon;
        var prevLat;
        var c = document.getElementById("myCanvas");
        var ctx = c.getContext("2d");
        c.width = window.innerWidth;
        c.height = window.innerHeight;

        // Defining the interval time between each sample we take from the simulaor.
        var IntervalTime = 1000 * @Session["timeSave"]
        // Defining the timeout
        var timeout = 1000 * @Session["duration"]

        function displaySamples() {
            // Keep sampling as long as timeout hasn't expired.
            if (timeout > 0) {
                // Getting the current values of the Lon and Lat.
                $.post("@Url.Action("GetSaveSample")").done(function (xml) {
                    var xmlDoc = $.parseXML(xml),
                        $xml = $(xmlDoc),
                        Lon = $xml.find("Lon").text();
                    Lat = $xml.find("Lat").text();

                    // Normalizing the values of the Lon and Lat
                    normalizedLon = (parseFloat(window.innerWidth) / 360) * (parseFloat(Lon) + 180);
                    normalizedLat = (parseFloat(window.innerHeight) / 180) * (parseFloat(Lat) + 90);

                    // If it's not the first sample - draw the connected line.Drawing the connected line.
                    if ((prevLon != null) && (prevLat != null)) {
                        ctx.lineCap = "round";
                        ctx.lineWidth = 1;
                        ctx.strokeStyle = "red";
                        ctx.moveTo(prevLon, prevLat);
                        ctx.lineTo(normalizedLon, normalizedLat);
                        ctx.stroke();
                    }

                    // Drawing the flight location using the Lon and Lat values from the simulator
                    ctx.beginPath();
                    ctx.strokeStyle = "black";
                    ctx.lineWidth = 4;
                    ctx.arc(normalizedLon, normalizedLat, 3, 0, 2 * Math.PI);
                    ctx.stroke();
                    ctx.fillStyle = "red";
                    ctx.fill();

                    // save current values as last values.
                    prevLon = normalizedLon;
                    prevLat = normalizedLat;

                });
                timeout -= IntervalTime;
            } else {
                // If timeout is 0, stop sampling.
                clearInterval(sampleInterval);
                alert("                                            Saving is over!");
            }
        }

        sampleInterval = setInterval(displaySamples, IntervalTime);
        displaySamples();
    </script>

</body>
</html>
