@model Ex3.Models.InfoModel
@{
    ViewBag.Title = "saveFlightInfo";
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>saveFlightInfo</title>

    <style>
        #myCanvas {
            height: 100%;
            width: 100%;
        }
    </style>

    @{
        int time = int.Parse(@HttpContext.Current.Session["timeSave"].ToString());
        int duration = int.Parse(@HttpContext.Current.Session["duration"].ToString());
    }
</head>
<body id="body" style="background:url(../../Resources/export-map-share.png);background-repeat:no-repeat;background-size:100% 100%;background-attachment:fixed">
    <canvas id="myCanvas" style="border:1px solid #d3d3d3; background:inherit "></canvas>


    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.0/jquery.min.js"></script>
    <script>
        var prevLon;
        var prevLat;
        var Lon;
        var Lat;
        var Rudder;
        var Throttle;
        var c = document.getElementById("myCanvas");
        var ctx = c.getContext("2d");

        var j = 0;
        const image = new Image(window.innerWidth, window.innerHeight); // Using optional size for image
        image.onload = drawImageActualSize; // Draw when image has loaded

        // Load an image of intrinsic size 300x227 in CSS pixels
        image.src = "/Resources/export-map-share.png";

        function drawImageActualSize() {
            // Use the intrinsic size of image in CSS pixels for the canvas element
            c.width = window.innerWidth;
            c.height = window.innerHeight;

            // Will draw the image as 300x227, ignoring the custom size of 60x45
            // given in the constructor
            ctx.drawImage(this, 0, 0);

            // To use the custom size we'll have to specify the scale parameters
            // using the element's width and height properties - lets draw one
            // on top in the corner:
            ctx.drawImage(this, 0, 0, this.width, this.height);
        }

        var IntervalTime = 1000/@time;
        var timeout = @duration * 1000;

        function display() {
            if (timeout > 0) {
                $.post("@Url.Action("GetSaveSample")").done(function (xml) {
                    var xmlDoc = $.parseXML(xml),
                        $xml = $(xmlDoc),
                        Lon = $xml.find("Lon").text();
                    Lat = $xml.find("Lat").text();
                    Rudder = $xml.find("Rudder").text();
                    Throttle = $xml.find("Throttle").text();

                    if ((prevLon != null) && (prevLat != null)) {
                        ctx.strokeStyle = "red";
                        ctx.moveTo(prevLon, prevLat);
                        ctx.lineTo((window.innerWidth / 360) * Lon, (window.innerHeight / 180) * Lat);
                        ctx.stroke();
                    }

                    ctx.beginPath();
                    ctx.strokeStyle = "blue";
                    ctx.arc((window.innerWidth / 360) * Lon, (window.innerHeight / 180) * Lat, 4, 0, 2 * Math.PI);
                    ctx.stroke();
                    ctx.fillStyle = "red";
                    ctx.fill();

                    prevLon = (window.innerWidth / 360) * Lon;
                    prevLat = (window.innerHeight / 180) * Lat;

                });
                timeout -= IntervalTime;

            } else {
                clearInterval(sampleInterval);
            }
        }

        sampleInterval = setInterval(display, IntervalTime);
        display();

    </script>

</body>
</html>

